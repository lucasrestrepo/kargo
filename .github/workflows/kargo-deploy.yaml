name: Kargo CI/CD Pipeline for GKE with Kustomize

on:
  push:
    branches:
      - main
      - dev
      - stg

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ secrets.GKE_KUBECONFIG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.GKE_KUBECONFIG }}" > ~/.kube/config

      - name: Install Go
        run: |
          curl -LO https://golang.org/dl/go1.17.6.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV

      - name: Download, Extract, and Compile Kargo
        run: |
          # Download and extract Kargo source code
          curl -L https://github.com/mumoshu/kargo/archive/refs/tags/v0.1.0.tar.gz -o kargo-v0.1.0.tar.gz
          tar -xzf kargo-v0.1.0.tar.gz
          
          # Change directory to the extracted folder and compile
          cd kargo-0.1.0
          go build -o kargo  # This creates the kargo binary in the current directory
          
          # Move the compiled binary to the root directory and set permissions
          mv kargo ../kargo
          cd ..
          chmod +x kargo  # Ensure kargo is executable
          
          # Debugging: List details to verify the compiled binary
          file ./kargo
          ls -l ./kargo

      - name: Deploy to GKE with Kargo
        run: |
          if [ "${GITHUB_REF##*/}" == "main" ]; then
            ./kargo -f kargo.yaml apply production
          elif [ "${GITHUB_REF##*/}" == "stg" ]; then
            ./kargo -f kargo.yaml apply staging
          elif [ "${GITHUB_REF##*/}" == "dev" ]; then
            ./kargo -f kargo.yaml apply dev
          else
            echo "No matching environment for branch ${GITHUB_REF##*/}"
          fi
